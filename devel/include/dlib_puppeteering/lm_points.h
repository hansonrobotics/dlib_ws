// Generated by gencpp from file dlib_puppeteering/lm_points.msg
// DO NOT EDIT!


#ifndef DLIB_PUPPETEERING_MESSAGE_LM_POINTS_H
#define DLIB_PUPPETEERING_MESSAGE_LM_POINTS_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace dlib_puppeteering
{
template <class ContainerAllocator>
struct lm_points_
{
  typedef lm_points_<ContainerAllocator> Type;

  lm_points_()
    : dlib_X()
    , dlib_Y()
    , dlib_face_index()  {
    }
  lm_points_(const ContainerAllocator& _alloc)
    : dlib_X(_alloc)
    , dlib_Y(_alloc)
    , dlib_face_index(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _dlib_X_type;
  _dlib_X_type dlib_X;

   typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _dlib_Y_type;
  _dlib_Y_type dlib_Y;

   typedef std::vector<int32_t, typename ContainerAllocator::template rebind<int32_t>::other >  _dlib_face_index_type;
  _dlib_face_index_type dlib_face_index;




  typedef boost::shared_ptr< ::dlib_puppeteering::lm_points_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::dlib_puppeteering::lm_points_<ContainerAllocator> const> ConstPtr;

}; // struct lm_points_

typedef ::dlib_puppeteering::lm_points_<std::allocator<void> > lm_points;

typedef boost::shared_ptr< ::dlib_puppeteering::lm_points > lm_pointsPtr;
typedef boost::shared_ptr< ::dlib_puppeteering::lm_points const> lm_pointsConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::dlib_puppeteering::lm_points_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::dlib_puppeteering::lm_points_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace dlib_puppeteering

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg'], 'dlib_puppeteering': ['/home/icog-labs/dlib_ws/src/dlib_puppeteering/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::dlib_puppeteering::lm_points_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::dlib_puppeteering::lm_points_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::dlib_puppeteering::lm_points_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::dlib_puppeteering::lm_points_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::dlib_puppeteering::lm_points_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::dlib_puppeteering::lm_points_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::dlib_puppeteering::lm_points_<ContainerAllocator> >
{
  static const char* value()
  {
    return "f16b68aae8c62278ab60e0b515e1cf27";
  }

  static const char* value(const ::dlib_puppeteering::lm_points_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xf16b68aae8c62278ULL;
  static const uint64_t static_value2 = 0xab60e0b515e1cf27ULL;
};

template<class ContainerAllocator>
struct DataType< ::dlib_puppeteering::lm_points_<ContainerAllocator> >
{
  static const char* value()
  {
    return "dlib_puppeteering/lm_points";
  }

  static const char* value(const ::dlib_puppeteering::lm_points_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::dlib_puppeteering::lm_points_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32[] dlib_X\n\
float32[] dlib_Y\n\
int32[] dlib_face_index\n\
";
  }

  static const char* value(const ::dlib_puppeteering::lm_points_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::dlib_puppeteering::lm_points_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.dlib_X);
      stream.next(m.dlib_Y);
      stream.next(m.dlib_face_index);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct lm_points_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::dlib_puppeteering::lm_points_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::dlib_puppeteering::lm_points_<ContainerAllocator>& v)
  {
    s << indent << "dlib_X[]" << std::endl;
    for (size_t i = 0; i < v.dlib_X.size(); ++i)
    {
      s << indent << "  dlib_X[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.dlib_X[i]);
    }
    s << indent << "dlib_Y[]" << std::endl;
    for (size_t i = 0; i < v.dlib_Y.size(); ++i)
    {
      s << indent << "  dlib_Y[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.dlib_Y[i]);
    }
    s << indent << "dlib_face_index[]" << std::endl;
    for (size_t i = 0; i < v.dlib_face_index.size(); ++i)
    {
      s << indent << "  dlib_face_index[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.dlib_face_index[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // DLIB_PUPPETEERING_MESSAGE_LM_POINTS_H
