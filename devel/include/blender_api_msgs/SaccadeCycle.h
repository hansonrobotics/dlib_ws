// Generated by gencpp from file blender_api_msgs/SaccadeCycle.msg
// DO NOT EDIT!


#ifndef BLENDER_API_MSGS_MESSAGE_SACCADECYCLE_H
#define BLENDER_API_MSGS_MESSAGE_SACCADECYCLE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace blender_api_msgs
{
template <class ContainerAllocator>
struct SaccadeCycle_
{
  typedef SaccadeCycle_<ContainerAllocator> Type;

  SaccadeCycle_()
    : mean(0.0)
    , variation(0.0)
    , paint_scale(0.0)
    , eye_size(0.0)
    , eye_distance(0.0)
    , mouth_width(0.0)
    , mouth_height(0.0)
    , weight_eyes(0.0)
    , weight_mouth(0.0)  {
    }
  SaccadeCycle_(const ContainerAllocator& _alloc)
    : mean(0.0)
    , variation(0.0)
    , paint_scale(0.0)
    , eye_size(0.0)
    , eye_distance(0.0)
    , mouth_width(0.0)
    , mouth_height(0.0)
    , weight_eyes(0.0)
    , weight_mouth(0.0)  {
  (void)_alloc;
    }



   typedef float _mean_type;
  _mean_type mean;

   typedef float _variation_type;
  _variation_type variation;

   typedef float _paint_scale_type;
  _paint_scale_type paint_scale;

   typedef float _eye_size_type;
  _eye_size_type eye_size;

   typedef float _eye_distance_type;
  _eye_distance_type eye_distance;

   typedef float _mouth_width_type;
  _mouth_width_type mouth_width;

   typedef float _mouth_height_type;
  _mouth_height_type mouth_height;

   typedef float _weight_eyes_type;
  _weight_eyes_type weight_eyes;

   typedef float _weight_mouth_type;
  _weight_mouth_type weight_mouth;




  typedef boost::shared_ptr< ::blender_api_msgs::SaccadeCycle_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::blender_api_msgs::SaccadeCycle_<ContainerAllocator> const> ConstPtr;

}; // struct SaccadeCycle_

typedef ::blender_api_msgs::SaccadeCycle_<std::allocator<void> > SaccadeCycle;

typedef boost::shared_ptr< ::blender_api_msgs::SaccadeCycle > SaccadeCyclePtr;
typedef boost::shared_ptr< ::blender_api_msgs::SaccadeCycle const> SaccadeCycleConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::blender_api_msgs::SaccadeCycle_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::blender_api_msgs::SaccadeCycle_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace blender_api_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'geometry_msgs': ['/opt/ros/indigo/share/geometry_msgs/cmake/../msg'], 'blender_api_msgs': ['/home/esku/dlib_ws/src/blender_api_msgs/msg'], 'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::blender_api_msgs::SaccadeCycle_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::blender_api_msgs::SaccadeCycle_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::blender_api_msgs::SaccadeCycle_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::blender_api_msgs::SaccadeCycle_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::blender_api_msgs::SaccadeCycle_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::blender_api_msgs::SaccadeCycle_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::blender_api_msgs::SaccadeCycle_<ContainerAllocator> >
{
  static const char* value()
  {
    return "2ddd4aa1af1ce0e41299d9e0d97ba48f";
  }

  static const char* value(const ::blender_api_msgs::SaccadeCycle_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x2ddd4aa1af1ce0e4ULL;
  static const uint64_t static_value2 = 0x1299d9e0d97ba48fULL;
};

template<class ContainerAllocator>
struct DataType< ::blender_api_msgs::SaccadeCycle_<ContainerAllocator> >
{
  static const char* value()
  {
    return "blender_api_msgs/SaccadeCycle";
  }

  static const char* value(const ::blender_api_msgs::SaccadeCycle_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::blender_api_msgs::SaccadeCycle_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32 mean\n\
float32 variation\n\
float32 paint_scale\n\
float32 eye_size\n\
float32 eye_distance\n\
float32 mouth_width\n\
float32 mouth_height\n\
float32 weight_eyes\n\
float32 weight_mouth\n\
\n\
";
  }

  static const char* value(const ::blender_api_msgs::SaccadeCycle_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::blender_api_msgs::SaccadeCycle_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.mean);
      stream.next(m.variation);
      stream.next(m.paint_scale);
      stream.next(m.eye_size);
      stream.next(m.eye_distance);
      stream.next(m.mouth_width);
      stream.next(m.mouth_height);
      stream.next(m.weight_eyes);
      stream.next(m.weight_mouth);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct SaccadeCycle_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::blender_api_msgs::SaccadeCycle_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::blender_api_msgs::SaccadeCycle_<ContainerAllocator>& v)
  {
    s << indent << "mean: ";
    Printer<float>::stream(s, indent + "  ", v.mean);
    s << indent << "variation: ";
    Printer<float>::stream(s, indent + "  ", v.variation);
    s << indent << "paint_scale: ";
    Printer<float>::stream(s, indent + "  ", v.paint_scale);
    s << indent << "eye_size: ";
    Printer<float>::stream(s, indent + "  ", v.eye_size);
    s << indent << "eye_distance: ";
    Printer<float>::stream(s, indent + "  ", v.eye_distance);
    s << indent << "mouth_width: ";
    Printer<float>::stream(s, indent + "  ", v.mouth_width);
    s << indent << "mouth_height: ";
    Printer<float>::stream(s, indent + "  ", v.mouth_height);
    s << indent << "weight_eyes: ";
    Printer<float>::stream(s, indent + "  ", v.weight_eyes);
    s << indent << "weight_mouth: ";
    Printer<float>::stream(s, indent + "  ", v.weight_mouth);
  }
};

} // namespace message_operations
} // namespace ros

#endif // BLENDER_API_MSGS_MESSAGE_SACCADECYCLE_H
