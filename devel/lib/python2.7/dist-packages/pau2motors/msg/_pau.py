# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from pau2motors/pau.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import geometry_msgs.msg

class pau(genpy.Message):
  _md5sum = "49c3e3c79051e845f49e85a5ebffa67a"
  _type = "pau2motors/pau"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """geometry_msgs/Quaternion m_headRotation
geometry_msgs/Vector3    m_headTranslation
geometry_msgs/Quaternion m_neckRotation

float32 m_eyeGazeLeftPitch
float32 m_eyeGazeLeftYaw
float32 m_eyeGazeRightPitch
float32 m_eyeGazeRightYaw

#An array of blendshape coefficients.
#They describe an expression of a virtual face.
float32[] m_coeffs
# Then setting shapekey values, names must be passed
string[] m_shapekeys
================================================================================
MSG: geometry_msgs/Quaternion
# This represents an orientation in free space in quaternion form.

float64 x
float64 y
float64 z
float64 w

================================================================================
MSG: geometry_msgs/Vector3
# This represents a vector in free space. 
# It is only meant to represent a direction. Therefore, it does not
# make sense to apply a translation to it (e.g., when applying a 
# generic rigid transformation to a Vector3, tf2 will only apply the
# rotation). If you want your data to be translatable too, use the
# geometry_msgs/Point message instead.

float64 x
float64 y
float64 z"""
  __slots__ = ['m_headRotation','m_headTranslation','m_neckRotation','m_eyeGazeLeftPitch','m_eyeGazeLeftYaw','m_eyeGazeRightPitch','m_eyeGazeRightYaw','m_coeffs','m_shapekeys']
  _slot_types = ['geometry_msgs/Quaternion','geometry_msgs/Vector3','geometry_msgs/Quaternion','float32','float32','float32','float32','float32[]','string[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       m_headRotation,m_headTranslation,m_neckRotation,m_eyeGazeLeftPitch,m_eyeGazeLeftYaw,m_eyeGazeRightPitch,m_eyeGazeRightYaw,m_coeffs,m_shapekeys

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(pau, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.m_headRotation is None:
        self.m_headRotation = geometry_msgs.msg.Quaternion()
      if self.m_headTranslation is None:
        self.m_headTranslation = geometry_msgs.msg.Vector3()
      if self.m_neckRotation is None:
        self.m_neckRotation = geometry_msgs.msg.Quaternion()
      if self.m_eyeGazeLeftPitch is None:
        self.m_eyeGazeLeftPitch = 0.
      if self.m_eyeGazeLeftYaw is None:
        self.m_eyeGazeLeftYaw = 0.
      if self.m_eyeGazeRightPitch is None:
        self.m_eyeGazeRightPitch = 0.
      if self.m_eyeGazeRightYaw is None:
        self.m_eyeGazeRightYaw = 0.
      if self.m_coeffs is None:
        self.m_coeffs = []
      if self.m_shapekeys is None:
        self.m_shapekeys = []
    else:
      self.m_headRotation = geometry_msgs.msg.Quaternion()
      self.m_headTranslation = geometry_msgs.msg.Vector3()
      self.m_neckRotation = geometry_msgs.msg.Quaternion()
      self.m_eyeGazeLeftPitch = 0.
      self.m_eyeGazeLeftYaw = 0.
      self.m_eyeGazeRightPitch = 0.
      self.m_eyeGazeRightYaw = 0.
      self.m_coeffs = []
      self.m_shapekeys = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_11d4f.pack(_x.m_headRotation.x, _x.m_headRotation.y, _x.m_headRotation.z, _x.m_headRotation.w, _x.m_headTranslation.x, _x.m_headTranslation.y, _x.m_headTranslation.z, _x.m_neckRotation.x, _x.m_neckRotation.y, _x.m_neckRotation.z, _x.m_neckRotation.w, _x.m_eyeGazeLeftPitch, _x.m_eyeGazeLeftYaw, _x.m_eyeGazeRightPitch, _x.m_eyeGazeRightYaw))
      length = len(self.m_coeffs)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.pack(pattern, *self.m_coeffs))
      length = len(self.m_shapekeys)
      buff.write(_struct_I.pack(length))
      for val1 in self.m_shapekeys:
        length = len(val1)
        if python3 or type(val1) == unicode:
          val1 = val1.encode('utf-8')
          length = len(val1)
        if python3:
          buff.write(struct.pack('<I%sB'%length, length, *val1))
        else:
          buff.write(struct.pack('<I%ss'%length, length, val1))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.m_headRotation is None:
        self.m_headRotation = geometry_msgs.msg.Quaternion()
      if self.m_headTranslation is None:
        self.m_headTranslation = geometry_msgs.msg.Vector3()
      if self.m_neckRotation is None:
        self.m_neckRotation = geometry_msgs.msg.Quaternion()
      end = 0
      _x = self
      start = end
      end += 104
      (_x.m_headRotation.x, _x.m_headRotation.y, _x.m_headRotation.z, _x.m_headRotation.w, _x.m_headTranslation.x, _x.m_headTranslation.y, _x.m_headTranslation.z, _x.m_neckRotation.x, _x.m_neckRotation.y, _x.m_neckRotation.z, _x.m_neckRotation.w, _x.m_eyeGazeLeftPitch, _x.m_eyeGazeLeftYaw, _x.m_eyeGazeRightPitch, _x.m_eyeGazeRightYaw,) = _struct_11d4f.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.m_coeffs = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.m_shapekeys = []
      for i in range(0, length):
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1 = str[start:end].decode('utf-8')
        else:
          val1 = str[start:end]
        self.m_shapekeys.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_11d4f.pack(_x.m_headRotation.x, _x.m_headRotation.y, _x.m_headRotation.z, _x.m_headRotation.w, _x.m_headTranslation.x, _x.m_headTranslation.y, _x.m_headTranslation.z, _x.m_neckRotation.x, _x.m_neckRotation.y, _x.m_neckRotation.z, _x.m_neckRotation.w, _x.m_eyeGazeLeftPitch, _x.m_eyeGazeLeftYaw, _x.m_eyeGazeRightPitch, _x.m_eyeGazeRightYaw))
      length = len(self.m_coeffs)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.m_coeffs.tostring())
      length = len(self.m_shapekeys)
      buff.write(_struct_I.pack(length))
      for val1 in self.m_shapekeys:
        length = len(val1)
        if python3 or type(val1) == unicode:
          val1 = val1.encode('utf-8')
          length = len(val1)
        if python3:
          buff.write(struct.pack('<I%sB'%length, length, *val1))
        else:
          buff.write(struct.pack('<I%ss'%length, length, val1))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.m_headRotation is None:
        self.m_headRotation = geometry_msgs.msg.Quaternion()
      if self.m_headTranslation is None:
        self.m_headTranslation = geometry_msgs.msg.Vector3()
      if self.m_neckRotation is None:
        self.m_neckRotation = geometry_msgs.msg.Quaternion()
      end = 0
      _x = self
      start = end
      end += 104
      (_x.m_headRotation.x, _x.m_headRotation.y, _x.m_headRotation.z, _x.m_headRotation.w, _x.m_headTranslation.x, _x.m_headTranslation.y, _x.m_headTranslation.z, _x.m_neckRotation.x, _x.m_neckRotation.y, _x.m_neckRotation.z, _x.m_neckRotation.w, _x.m_eyeGazeLeftPitch, _x.m_eyeGazeLeftYaw, _x.m_eyeGazeRightPitch, _x.m_eyeGazeRightYaw,) = _struct_11d4f.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.m_coeffs = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.m_shapekeys = []
      for i in range(0, length):
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1 = str[start:end].decode('utf-8')
        else:
          val1 = str[start:end]
        self.m_shapekeys.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_11d4f = struct.Struct("<11d4f")
