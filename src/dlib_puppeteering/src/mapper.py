#!/usr/bin/env python3
import sys
import rospy

import roslib
#import cv2

from pau2motors.msg import pau
from dlib_puppeteering.msg import lm_points
roslib.load_manifest('dlib_puppeteering')

import random
import numpy
import numpy as np
from sklearn.linear_model import Ridge

class dlib_puppeteering:
  
  # declare publishers, subscribers, and other important static variables
  def __init__(self):
  
    self.once = 0
    self.dlibX = []
    self.dlibY = []

    self.dlibFaceIndex = []
    self.indexes = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]  # shapekey indexes tobe mapped

    self.pub_pau = rospy.Publisher('/blender_api/set_pau', pau, queue_size=10)
    self.image_sub = rospy.Subscriber("/dlib_values", lm_points, self.dlib_callback)

    self.blendshape_names = ['brow_center_UP', 'brow_center_DN', 'brow_inner_UP.L', 'brow_inner_DN.L', 'brow_inner_UP.R',
                          'brow_inner_DN.R', 'brow_outer_UP.L', 'brow_outer_DN.L', 'brow_outer_up.R', 'brow_outer_DN.R',
                          'eye-flare.UP.L', 'eye-blink.UP.L', 'eye-flare.UP.R', 'eye-blink.UP.R', 'eye-blink.LO.L',
                          'eye-flare.LO.L', 'eye-blink.LO.R', 'eye-flare.LO.R', 'wince.L', 'wince.R', 'sneer.L',
                          'sneer.R', 'eyes-look.dn', 'eyes-look.up', 'lip-UP.C.UP', 'lip-UP.C.DN', 'lip-UP.L.UP',
                          'lip-UP.L.DN', 'lip-UP.R.UP', 'lip-UP.R.DN', 'lips-smile.L','lips-smile.R', 'lips-wide.L',
                          'lips-narrow.L', 'lips-wide.R', 'lips-narrow.R', 'lip-DN.C.DN', 'lip-DN.C.UP', 'lip-DN.L.DN',
                          'lip-DN.L.UP', 'lip-DN.R.DN', 'lip-DN.R.UP', 'lips-frown.L', 'lips-frown.R','lip-JAW.DN']
    
  #x_normalized = 'hello'
  '''y_normalized = normalize(self.dlibY)
  xy = x_normalized + y_normalized
  xy = np.array(xy)
  browsup_model = Ridge(alpha = alpha)
  browsup_model.coeff_ = coeff_brows_up
  browsup_model.intercept_ = intercept_brows_up
  alpha = 0.1
  ridge = Ridge(alpha = alpha)''' 
  
  # callback: gets relative distance of DLIB's land marks per their corresponding shapekey
  def dlib_callback(self, data):

          coeff_brows_up = ([-0.03994529,  0.05965983,  0.26604942, -0.10001976,  0.02571235,
       -0.15743366, -0.15107966,  0.05932797, -0.04445027, -0.00051184,
       -0.01794235,  0.08205211, -0.02737744, -0.04503058,  0.00097107,
        0.03430173,  0.00135388,  0.12086409,  0.24367876,  0.12423624,
        0.12427326, -0.12390761,  0.16738411, -0.03294159, -0.02225945,
       -0.09150146, -0.05671128,  0.00994966, -0.0041362 ,  0.11825082,
       -0.07925411, -0.08126947, -0.05907555, -0.09782393,  0.04432068,
       -0.0397211 , -0.09751762, -0.17953067,  0.06043592,  0.10127657,
        0.02658325, -0.07335536, -0.21000558,  0.04144996, -0.01290343,
        0.06514291,  0.00780998,  0.01651065,  0.19827989, -0.00394886,
        0.00552164, -0.20197584,  0.02243605, -0.0724711 , -0.15828425,
        0.00535809,  0.10761565, -0.02992744,  0.07518744,  0.13417684,
        0.00995507,  0.08043928,  0.14559729, -0.07282683, -0.01328051,
        0.0701037 ,  0.01477559,  0.0152705 , -0.14343098,  0.15201524,
       -0.14463469,  0.02412382,  0.0697816 ,  0.00741937,  0.00819093,
       -0.03161338, -0.11183878, -0.00521626, -0.0349472 ,  0.08937093,
        0.02370157,  0.05277089, -0.0681871 ,  0.02369042, -0.05190085,
        0.05925793,  0.1404831 ,  0.05088367, -0.29246621, -0.09831926,
       -0.10359141, -0.04927141, -0.04304857,  0.18312706,  0.13543494,
       -0.18588968, -0.02794997, -0.13353171, -0.00807263, -0.1083353 ,
        0.12407571,  0.02983456,  0.16133227, -0.15397156, -0.12894383,
       -0.08374003, -0.03608447, -0.03653539, -0.08866398, -0.05310818,
       -0.08937821,  0.03761951,  0.13386111, -0.11045425,  0.03025596,
        0.047111  ,  0.060447  , -0.01068462,  0.0219471 , -0.01606329,
        0.14224367,  0.16036216, -0.03929058,  0.06096333, -0.06239731,
        0.07814062,  0.07903677,  0.10244747,  0.04471812, -0.04535393,
        0.01450537,  0.01261773,  0.0079287 , -0.09126498,  0.00105649,
       -0.10070298])
          coeff_brows_up = numpy.array(coeff_brows_up)

          intercept_brows_up = 0.24949174560098603

          self.dlibX = data.dlib_X
          self.dlibY = data.dlib_Y
          self.dlibFaceIndex = data.dlib_face_index

          head_pau = pau()

          head_pau.m_headRotation.x = 0.9
          head_pau.m_headRotation.y = 0.5
          head_pau.m_headRotation.z = 0.7
          head_pau.m_headRotation.w = 0.9

          head_pau.m_headTranslation.x =0.9
          head_pau.m_headTranslation.y =0.7
          head_pau.m_headTranslation.z =0.8

          head_pau.m_neckRotation.x= -0.9
          head_pau.m_neckRotation.y= -0.5
          head_pau.m_neckRotation.z= 0.5
          head_pau.m_neckRotation.w= 0.9

          head_pau.m_eyeGazeLeftPitch = 0.01
          head_pau.m_eyeGazeLeftYaw = 0.1
          head_pau.m_eyeGazeRightPitch = 0.01
          head_pau.m_eyeGazeRightYaw = 0.1

          head_pau.m_shapekeys = self.blendshape_names
          head_pau.m_coeffs = self.doMapping()

          self.pub_pau.publish(head_pau) # publish to "/blender_api/set_pau"


     #x_normalized = normalize(self.dlibX)
  '''y_normalized = normalize(self.dlibY)
  xy = x_normalized + y_normalized
  xy = np.array(xy)
  browsup_model = Ridge(alpha = alpha)
  browsup_model.coeff_ = coeff_brows_up
  browsup_model.intercept_ = intercept_brows_up
  alpha = 0.1
  ridge = Ridge(alpha = alpha)'''


  def normalize(self, pts):
      return np.subtract(pts, pts.mean(axis=0))/abs(2*pts.mean(axis=0))/1000




  def ridge_model(self):

      ddxy = ([-0.20136339, -0.19197872, -0.29754315, -0.27777834, -0.35640877,
       -0.56669503, -0.66231786, -0.98552952, -1.33168902, -1.58738962,
       -1.8285137 , -2.02086434, -2.06813294, -2.02763159, -2.03622222,
       -2.28195342, -2.01666826, -0.47187171, -0.57684315, -0.68204538,
       -0.85650392, -0.86238391, -0.97794486, -1.04072677, -1.29793252,
       -1.37061748, -1.46588362, -1.0043164 , -1.13740908, -1.2845294 ,
       -1.1836994 , -1.10961526, -1.15920834, -1.29490195, -1.35365533,
       -1.47507905, -0.44899443, -0.50658187, -0.54095688, -0.76037146,
       -0.6906026 , -0.61629663, -1.15157871, -1.3469053 , -1.4007582 ,
       -1.69303541, -1.54100111, -1.48744624, -0.88102633, -0.84337514,
       -1.11819498, -1.36725304, -1.38828296, -1.56851407, -1.70256182,
       -1.65984486, -1.53937675, -1.327357  , -1.14292117, -0.92043979,
       -0.83122889, -1.06017794, -1.33688889, -1.40288203, -1.59308356,
       -1.41292542, -1.32692386, -1.02636929, -0.44815071, -0.57735432,
       -0.89783872, -0.96839696, -1.1676795 , -1.6583195 , -1.66164169,
       -1.90351314, -2.10968134, -2.18253687, -1.95862448, -1.34629419,
       -0.9638231 , -0.78837192, -0.65779911, -0.40302537, -0.18340967,
        0.09831614,  0.1297503 ,  0.06750051,  0.25196739,  0.13914008,
        0.135411  ,  0.21991473,  0.112319  ,  0.14270486,  0.09091991,
        0.00700231,  0.12328181,  0.00907503, -0.22832117, -0.52601393,
       -0.5991291 , -0.63257786, -0.36858454, -0.41341056, -0.2       ,
       -0.12272375, -0.15602217, -0.15811286, -0.14340276, -0.23051861,
       -0.10539127, -0.11114994, -0.17083964, -0.09152469, -0.06400251,
       -0.15831148, -1.09383208, -0.68193252, -0.63302168, -0.75859428,
       -0.79034244, -0.95561199, -1.04536929, -1.0346538 , -1.19732557,
       -0.92523441, -1.0956269 , -0.76261875, -1.14421004, -0.99176795,
       -0.96351333, -1.15807378, -1.02291815, -0.80028767, -0.73084843,
       -0.70861232], [-0.20136339, -0.19197872, -0.29754315, -0.40998067, -0.50132751,
       -0.72965026, -0.84747209, -1.20069038, -1.58231588, -1.87252395,
       -2.14024504, -2.35110314, -2.41215616, -2.38110423, -2.39555556,
       -2.28195342, -2.01666826, -0.47187171, -0.42142026, -0.68204538,
       -0.85650392, -1.08996268, -0.97794486, -1.04072677, -1.29793252,
       -1.7048198 , -1.81429822, -1.0043164 , -1.13740908, -1.2845294 ,
       -1.43511565, -0.88761858, -1.15920834, -1.29490195, -1.61790077,
       -1.7517424 , -0.44899443, -0.50658187, -0.54095688, -0.76037146,
       -0.6906026 , -0.61629663, -1.15157871, -1.3469053 , -1.4007582 ,
       -1.69303541, -1.22718022, -1.48744624, -0.88102633, -1.06305341,
       -1.11819498, -1.36725304, -1.38828296, -1.56851407, -1.70256182,
       -1.65984486, -1.53937675, -1.327357  , -1.14292117, -1.13886765,
       -1.04307632, -1.29712653, -1.33688889, -1.40288203, -1.59308356,
       -1.41292542, -1.32692386, -1.26304259, -0.44815071, -0.57735432,
       -0.89783872, -1.2708016 , -1.50265131, -1.6583195 , -2.05410935,
       -2.31477018, -2.10968134, -2.18253687, -1.56858136, -1.34629419,
       -0.9638231 , -0.49106844, -0.39283394, -0.16957263,  0.01840791,
       -0.07253295, -0.0245681 ,  0.06750051,  0.25196739,  0.13914008,
        0.135411  ,  0.21991473,  0.112319  , -0.01346761, -0.08202868,
        0.19892934,  0.12328181, -0.22884868, -0.22832117, -0.52601393,
       -0.5991291 , -0.63257786, -0.64921141, -0.41341056, -0.2       ,
       -0.3179808 , -0.15602217,  0.04345597,  0.06199359, -0.02428312,
       -0.10539127, -0.30827764, -0.36856766, -0.09152469, -0.06400251,
        0.04921422, -1.09383208, -0.99824429, -0.63302168, -0.75859428,
       -0.79034244, -0.95561199, -1.04536929, -1.0346538 , -1.19732557,
       -1.28241518, -1.0956269 , -1.11099686, -1.14421004, -0.99176795,
       -0.96351333, -1.15807378, -1.02291815, -0.80028767, -0.73084843,
       -0.70861232])

      fs = ([0.0271304, 0.0354164])

      # selected browup parts (10 x and 10 y)
      brow_sel = ([-0.47187171, -0.57684315, -0.68204538, -0.85650392, -0.86238391,
       -0.97794486, -1.04072677, -1.29793252, -1.37061748, -1.46588362,
        0.09831614,  0.1297503 ,  0.06750051,  0.25196739,  0.13914008,
        0.135411  ,  0.21991473,  0.112319  ,  0.14270486,  0.09091991], [-0.47187171, -0.42142026, -0.68204538, -0.85650392, -1.08996268,
       -0.97794486, -1.04072677, -1.29793252, -1.7048198 , -1.81429822,
       -0.07253295, -0.0245681 ,  0.06750051,  0.25196739,  0.13914008,
        0.135411  ,  0.21991473,  0.112319  , -0.01346761, -0.08202868])

      coeff_brows_up = ([-0.03994529,  0.05965983,  0.26604942, -0.10001976,  0.02571235,
       -0.15743366, -0.15107966,  0.05932797, -0.04445027, -0.00051184,
       -0.01794235,  0.08205211, -0.02737744, -0.04503058,  0.00097107,
        0.03430173,  0.00135388,  0.12086409,  0.24367876,  0.12423624,
        0.12427326, -0.12390761,  0.16738411, -0.03294159, -0.02225945,
       -0.09150146, -0.05671128,  0.00994966, -0.0041362 ,  0.11825082,
       -0.07925411, -0.08126947, -0.05907555, -0.09782393,  0.04432068,
       -0.0397211 , -0.09751762, -0.17953067,  0.06043592,  0.10127657,
        0.02658325, -0.07335536, -0.21000558,  0.04144996, -0.01290343,
        0.06514291,  0.00780998,  0.01651065,  0.19827989, -0.00394886,
        0.00552164, -0.20197584,  0.02243605, -0.0724711 , -0.15828425,
        0.00535809,  0.10761565, -0.02992744,  0.07518744,  0.13417684,
        0.00995507,  0.08043928,  0.14559729, -0.07282683, -0.01328051,
        0.0701037 ,  0.01477559,  0.0152705 , -0.14343098,  0.15201524,
       -0.14463469,  0.02412382,  0.0697816 ,  0.00741937,  0.00819093,
       -0.03161338, -0.11183878, -0.00521626, -0.0349472 ,  0.08937093,
        0.02370157,  0.05277089, -0.0681871 ,  0.02369042, -0.05190085,
        0.05925793,  0.1404831 ,  0.05088367, -0.29246621, -0.09831926,
       -0.10359141, -0.04927141, -0.04304857,  0.18312706,  0.13543494,
       -0.18588968, -0.02794997, -0.13353171, -0.00807263, -0.1083353 ,
        0.12407571,  0.02983456,  0.16133227, -0.15397156, -0.12894383,
       -0.08374003, -0.03608447, -0.03653539, -0.08866398, -0.05310818,
       -0.08937821,  0.03761951,  0.13386111, -0.11045425,  0.03025596,
        0.047111  ,  0.060447  , -0.01068462,  0.0219471 , -0.01606329,
        0.14224367,  0.16036216, -0.03929058,  0.06096333, -0.06239731,
        0.07814062,  0.07903677,  0.10244747,  0.04471812, -0.04535393,
        0.01450537,  0.01261773,  0.0079287 , -0.09126498,  0.00105649,
       -0.10070298])

      intercept_brows_up = 0.24949174560098603


      coeff_brows_up_1 = ([ 0.00826801,  0.03919467,  0.09492688, -0.02330364, -0.01851281,
       -0.07505987, -0.08062488,  0.02133722, -0.04139993, -0.00469835,
       -0.01627739,  0.06343162, -0.01199001, -0.03292144, -0.02158308,
        0.02521459,  0.02350724,  0.18036606,  0.17943378,  0.09250389,
        0.0999009 , -0.11054803,  0.15195532, -0.02656013, -0.01481795,
       -0.09120181, -0.09605206,  0.00449905, -0.01236446,  0.05337093,
       -0.03173842, -0.04186371, -0.03150732, -0.07362962,  0.01979166,
       -0.00619203, -0.06302394, -0.09135766,  0.01138663,  0.08196839,
       -0.00515487, -0.03757382, -0.16352432,  0.01987175,  0.0133382 ,
        0.06529199,  0.02823236, -0.00863909,  0.14321005, -0.00572816,
       -0.00179883, -0.10161573,  0.00359342, -0.05724974, -0.11574342,
        0.00853375,  0.06521456,  0.01641004,  0.05782565,  0.07660451,
        0.02711089,  0.06027786,  0.05688599, -0.03349599, -0.04236254,
        0.02844507,  0.01510621,  0.0333984 , -0.08134361,  0.05557363,
       -0.0941091 , -0.0073087 ,  0.06632574,  0.01727763, -0.0007608 ,
       -0.03388308, -0.08680195, -0.01409748, -0.02733392,  0.06537632,
        0.04179272,  0.02162681, -0.03598744,  0.01045861, -0.04766438,
        0.05951158,  0.08374249, -0.01972062, -0.20672878, -0.10881975,
       -0.05465144, -0.08339749,  0.01316335,  0.15745329,  0.15602439,
       -0.18494324, -0.0743757 , -0.10871673, -0.02200524, -0.08886992,
        0.09847419,  0.04794805,  0.11529274, -0.10078747, -0.08312972,
       -0.05098283, -0.06979083, -0.05768224, -0.06299912, -0.02229148,
       -0.0838382 ,  0.02407352,  0.07193784, -0.08375124,  0.03862982,
        0.03682675,  0.05952226,  0.00060032,  0.01315308,  0.00865339,
        0.10020094,  0.09430245, -0.01378669,  0.04779774, -0.04518066,
        0.06883468,  0.06983958,  0.07723091,  0.03147541, -0.00107391,
        0.0146141 ,  0.02040472,  0.00809848, -0.06378641, -0.00753312,
       -0.07406623])

      intercept_brows_up_1 = 0.2505889669085819

      coeff_brows_up_2 = ([ 0.48083792,  0.27106867,  0.03668482,  0.12882436, -0.36433359,
        0.19061265, -0.16316561,  0.0898691 , -0.1645095 ,  0.07562529,
        0.12046643,  0.14103941, -0.12866061, -0.52860149, -0.14071811,
        0.21265092, -0.16364927,  0.07291417,  0.18579154,  0.18055404])

      coeff_brows_up_fake = ([ 0.48083792,  0.27106867,  0.33668482,  0.12882436, -0.36433359,
        0.19061265, -0.16316561,  0.0898691 , -0.1645095 ,  0.37562529,
        0.32046643,  0.44103941, -0.12866061, -0.52860149, 0.14071811,
        0.21265092, -0.16364927,  0.07291417,  0.4579154,  0.28055404])

      intercept_brows_up_2 = 0.26057913654230946
      ddxy = numpy.loadtxt('' + "/home/meareg/dlib_ws/src/dlib_puppeteering/src/sel_ddxddy.csv", delimiter=",", skiprows=0)
      fs = numpy.loadtxt('' + "/home/meareg/dlib_ws/src/dlib_puppeteering/src/fs_browsup_eyeblink.csv", delimiter=",", skiprows=0)
      alpha = 0.1
      ridge = Ridge(alpha = alpha)
      ridge.fit(ddxy[100:450], fs[100:450])
      #ridge.score(ddxy[0:100], fs[0:100])
      #ridge.score(ddxy[450:595], fs[450:595])


   
      #ridge = Ridge(0.1)
      #ridge.fit(ddxy[0:2], fs[0:2])
      #ridge.fit(brow_sel[0:2], fs[0:2])
      #ridge._coeff = coeff_brows_up
      #ridge._coeff = coeff_brows_up_2
      #ridge._intercept = intercept_brows_up
      #ridge._coeff = coeff_brows_up_fake
      #ridge._intercept = intercept_brows_up_2
      return ridge

  def doMapping(self):
      xy_normalized = []
      x_new = []
  

      x = self.dlibX[17:27]
      y = self.dlibY[17:27]
      xy_normalized = x + y
      ddxy = numpy.loadtxt('' + "/home/meareg/dlib_ws/src/dlib_puppeteering/src/sel_ddxddy.csv", delimiter=",", skiprows=0)
      #xy_numpy = ([-1.7517424046, -0.4489944308, -0.6842833593, -0.5409568795, -0.760371465, -0.6906025978, -0.6162966263, -1.433741233, -1.64397329, -1.7137101117, -2.0194102016, -1.5410011138, -1.7854296566, -1.0837195339, -1.0630534118, -1.1181949842, -1.3672530438, -1.6527804757, -1.5685140687, -1.7025618178], [-1.7517424046, -0.6124869681, -0.6842833593, -0.5409568795, -0.760371465, -0.6906025978, -0.6162966263, -1.7159037538, -1.9410412834, -1.7137101117, -2.0194102016, -1.8548220094, -1.7854296566, -1.0837195339, -1.2827316871, -1.355614553, -1.6181518829, -1.6527804757, -1.5685140687, -1.9980842058], [-1.3536553276, -1.4750790547, -0.4489944308, -0.5065818668, -0.5409568795, -0.760371465, -0.6906025978, -0.6162966263, -1.1515787123, -1.3469052966, -1.4007582046, -1.6930354089, -1.5410011138, -1.4874462403, -0.8810263332, -0.8433751365, -1.1181949842, -1.3672530438, -1.3882829633, -1.5685140687])
      xy_numpy = numpy.array(xy_normalized)
      xy_normalized = self.normalize(xy_numpy)
      print(xy_normalized)
      print(xy_numpy)
      self.ridge = ''
      if self.once == 0:
          self.once = 1
          self.ridge = self.ridge_model()
          predicted_shapekey  = self.ridge.predict(ddxy[0:100])
          predicted_shapekey2  = self.ridge.predict(ddxy[450:590])
          print(predicted_shapekey)
          print(predicted_shapekey2)
      else:
          #predicted_shapekey = ridge.predict(xy_numpy)
          predicted_shapekey  = self.ridge.predict(ddxy[0:100])
          predicted_shapekey2  = self.ridge.predict(ddxy[450:590])
          #print(predicted_shapekey)
          #print(predicted_shapekey2)
      '''print(x)
      print('y')
      print(y)
      ridge = self.ridge_model()
      #xy_normalized = xy_normalized.reshape(1,-1)
      predicted_shapekey = ridge.predict(xy_normalized)
      print(predicted_shapekey)
      #print(ridge._intercept)
      #print(ridge._coeff)'''
      
      blendshape_values = []

      for i in range(0,45): # modify this block to include the machine learning approach
          if i in self.indexes:
              #random_val= random.random() # generate some random values between 0 and 1
              #blendshape_values.append(random_val)
              blendshape_values.append(predicted_shapekey[i])
              #print('random on print')
          else:
              blendshape_values.append(0.0)
          if i == 44:
              i = 0
      return blendshape_values

def main(args):
  rospy.init_node('dlib2blender_mapper', anonymous=True)
  dlib_puppeteering()
  try:
      rospy.spin()
  except KeyboardInterrupt:
      print("Dlib-Puppeteering Exiting...")
  #cv2.destroyAllWindows()

if __name__ == '__main__':
  main(sys.argv)







